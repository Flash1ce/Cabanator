package ca.ulaval.glo2004.gui;

import ca.ulaval.glo2004.App;
import ca.ulaval.glo2004.Utilitaires.Dimension3D;
import ca.ulaval.glo2004.gui.Dialogs.OuvrirProjetDialog;
import ca.ulaval.glo2004.gui.Tableau.TableauDeuxColonnes;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.TableModelEvent;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.TableModel;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.lang.reflect.Method;
import java.util.Locale;
import java.util.Optional;
import java.util.ResourceBundle;

import static ca.ulaval.glo2004.domain.GestionCabanon.Utilitaires.ValeurImperiale.convertirStringEnDouble;
import static ca.ulaval.glo2004.gui.Tableau.TableauDeuxColonnes.obtenirDonnee;

public class HomeWindow {
    public JPanel panneauPrincipal;
    private JPanel panneauAccueil;
    private JLabel texteTitre;
    private JButton boutonCreer;
    private JPanel panneauCredits;
    private JLabel texteUniversite;
    private JLabel texteCours;
    private JLabel texteNoms;
    private JPanel panneauOptions;
    private JPanel panneauCreer;
    private JSeparator separateur;
    private JButton boutonOuvrir;
    private JLabel texteEntrezDimensions;
    private JPanel panneauDimensions;
    private JPanel panneauOuvrir;
    private TableauDeuxColonnes tableauDimensions;

    private final Dimension3D dimension = new Dimension3D(
            VALEUR_DEFAUT_POUCES, VALEUR_DEFAUT_POUCES, VALEUR_DEFAUT_POUCES_H);

    private static final int VALEUR_DEFAUT_POUCES = 144;
    private static final int VALEUR_DEFAUT_POUCES_H = 96;
    private static final String VALEUR_DEFAUT = "12'";
    private static final String VALEUR_DEFAUT_H = "8'";

    public HomeWindow() {
        $$$setupUI$$$();

        boutonCreer.addActionListener(e -> {
            tableauDimensions.arreterEdition();
            Navigateur.afficherFenetrePrincipale(dimension);
        });
        boutonCreer.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        boutonOuvrir.addActionListener(e -> {
            new OuvrirProjetDialog().AfficherDialogue();
        });
        boutonOuvrir.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }

    public void preparerAffichage() {
        App.reinitialiserControleurCabanon();

        final Object[][] donneesDimensions = {
                {$$$getMessageFromBundle$$$("titres", "Longueur"), VALEUR_DEFAUT},
                {$$$getMessageFromBundle$$$("titres", "Largeur"), VALEUR_DEFAUT},
                {$$$getMessageFromBundle$$$("titres", "Hauteur"), VALEUR_DEFAUT_H}
        };

        tableauDimensions.definirLignesModifiables(new int[]{0, 1, 2});
        tableauDimensions.creerModele(donneesDimensions);

        tableauDimensions.getModel().addTableModelListener(e -> {
            if (e.getType() == TableModelEvent.UPDATE) {
                final TableModel donnees = (TableModel) e.getSource();

                final Optional<String> longueur = obtenirDonnee(donnees, 0);
                final Optional<String> largeur = obtenirDonnee(donnees, 1);
                final Optional<String> hauteur = obtenirDonnee(donnees, 2);

                if (longueur.isEmpty() || largeur.isEmpty() || hauteur.isEmpty()) return;

                dimension.longueur = convertirStringEnDouble(longueur.get());
                dimension.largeur = convertirStringEnDouble(largeur.get());
                dimension.hauteur = convertirStringEnDouble(hauteur.get());
            }
        });
    }

    private void createUIComponents() {
        panneauPrincipal = new JPanel();
        panneauPrincipal.setBorder(BorderFactory.createLineBorder(Couleurs.GRIS_MOYEN, 10));
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panneauPrincipal.setLayout(new GridBagLayout());
        panneauPrincipal.setBackground(new Color(-14869219));
        panneauAccueil = new JPanel();
        panneauAccueil.setLayout(new BorderLayout(0, 0));
        panneauAccueil.setBackground(new Color(-7566196));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        panneauPrincipal.add(panneauAccueil, gbc);
        panneauAccueil.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(0, 45, 10, 45), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        texteTitre = new JLabel();
        Font texteTitreFont = this.$$$getFont$$$("Dubai", Font.BOLD, 48, texteTitre.getFont());
        if (texteTitreFont != null) texteTitre.setFont(texteTitreFont);
        texteTitre.setForeground(new Color(-14869219));
        texteTitre.setHorizontalAlignment(0);
        this.$$$loadLabelText$$$(texteTitre, this.$$$getMessageFromBundle$$$("titres", "Titre"));
        panneauAccueil.add(texteTitre, BorderLayout.NORTH);
        panneauCredits = new JPanel();
        panneauCredits.setLayout(new BorderLayout(0, 0));
        panneauCredits.setBackground(new Color(-7566196));
        panneauAccueil.add(panneauCredits, BorderLayout.SOUTH);
        texteUniversite = new JLabel();
        Font texteUniversiteFont = this.$$$getFont$$$("Dubai", Font.PLAIN, 16, texteUniversite.getFont());
        if (texteUniversiteFont != null) texteUniversite.setFont(texteUniversiteFont);
        texteUniversite.setForeground(new Color(-14869219));
        texteUniversite.setHorizontalAlignment(0);
        this.$$$loadLabelText$$$(texteUniversite, this.$$$getMessageFromBundle$$$("titres", "Universite"));
        panneauCredits.add(texteUniversite, BorderLayout.NORTH);
        texteCours = new JLabel();
        Font texteCoursFont = this.$$$getFont$$$("Dubai", Font.PLAIN, 16, texteCours.getFont());
        if (texteCoursFont != null) texteCours.setFont(texteCoursFont);
        texteCours.setForeground(new Color(-14869219));
        texteCours.setHorizontalAlignment(0);
        this.$$$loadLabelText$$$(texteCours, this.$$$getMessageFromBundle$$$("titres", "Cours"));
        panneauCredits.add(texteCours, BorderLayout.CENTER);
        texteNoms = new JLabel();
        Font texteNomsFont = this.$$$getFont$$$("Dubai", Font.PLAIN, 16, texteNoms.getFont());
        if (texteNomsFont != null) texteNoms.setFont(texteNomsFont);
        texteNoms.setForeground(new Color(-14869219));
        texteNoms.setHorizontalAlignment(0);
        this.$$$loadLabelText$$$(texteNoms, this.$$$getMessageFromBundle$$$("titres", "Noms"));
        panneauCredits.add(texteNoms, BorderLayout.SOUTH);
        panneauOptions = new JPanel();
        panneauOptions.setLayout(new BorderLayout(0, 0));
        panneauOptions.setBackground(new Color(-7566196));
        panneauAccueil.add(panneauOptions, BorderLayout.CENTER);
        panneauOptions.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(0, 0, 30, 0), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        panneauCreer = new JPanel();
        panneauCreer.setLayout(new BorderLayout(0, 0));
        panneauCreer.setBackground(new Color(-7566196));
        panneauOptions.add(panneauCreer, BorderLayout.NORTH);
        panneauCreer.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(0, 0, 30, 0), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        boutonCreer = new JButton();
        boutonCreer.setBackground(new Color(-3421237));
        Font boutonCreerFont = this.$$$getFont$$$("Dubai", Font.PLAIN, 24, boutonCreer.getFont());
        if (boutonCreerFont != null) boutonCreer.setFont(boutonCreerFont);
        boutonCreer.setForeground(new Color(-14869219));
        boutonCreer.setIcon(new ImageIcon(getClass().getResource("/icons/new-50px.png")));
        this.$$$loadButtonText$$$(boutonCreer, this.$$$getMessageFromBundle$$$("titres", "CreerProjet"));
        panneauCreer.add(boutonCreer, BorderLayout.SOUTH);
        texteEntrezDimensions = new JLabel();
        Font texteEntrezDimensionsFont = this.$$$getFont$$$("Dubai", Font.PLAIN, 24, texteEntrezDimensions.getFont());
        if (texteEntrezDimensionsFont != null) texteEntrezDimensions.setFont(texteEntrezDimensionsFont);
        texteEntrezDimensions.setForeground(new Color(-14869219));
        texteEntrezDimensions.setHorizontalAlignment(0);
        this.$$$loadLabelText$$$(texteEntrezDimensions, this.$$$getMessageFromBundle$$$("titres", "EntrezDimensions"));
        panneauCreer.add(texteEntrezDimensions, BorderLayout.NORTH);
        panneauDimensions = new JPanel();
        panneauDimensions.setLayout(new BorderLayout(0, 0));
        panneauDimensions.setBackground(new Color(-7566196));
        panneauCreer.add(panneauDimensions, BorderLayout.CENTER);
        panneauDimensions.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(0, 0, 15, 0), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        tableauDimensions = new TableauDeuxColonnes();
        Font tableauDimensionsFont = this.$$$getFont$$$("Dubai", Font.PLAIN, 22, tableauDimensions.getFont());
        if (tableauDimensionsFont != null) tableauDimensions.setFont(tableauDimensionsFont);
        tableauDimensions.setForeground(new Color(-14869219));
        tableauDimensions.setGridColor(new Color(-3421237));
        panneauDimensions.add(tableauDimensions, BorderLayout.CENTER);
        separateur = new JSeparator();
        separateur.setBackground(new Color(-14869219));
        separateur.setForeground(new Color(-14869219));
        panneauOptions.add(separateur, BorderLayout.CENTER);
        panneauOuvrir = new JPanel();
        panneauOuvrir.setLayout(new BorderLayout(0, 0));
        panneauOuvrir.setBackground(new Color(-7566196));
        panneauOptions.add(panneauOuvrir, BorderLayout.SOUTH);
        panneauOuvrir.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(30, 0, 0, 0), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        boutonOuvrir = new JButton();
        boutonOuvrir.setBackground(new Color(-3421237));
        Font boutonOuvrirFont = this.$$$getFont$$$("Dubai", Font.PLAIN, 24, boutonOuvrir.getFont());
        if (boutonOuvrirFont != null) boutonOuvrir.setFont(boutonOuvrirFont);
        boutonOuvrir.setForeground(new Color(-14869219));
        boutonOuvrir.setIcon(new ImageIcon(getClass().getResource("/icons/open-50px.png")));
        this.$$$loadButtonText$$$(boutonOuvrir, this.$$$getMessageFromBundle$$$("titres", "OuvrirProjet"));
        panneauOuvrir.add(boutonOuvrir, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle;
        try {
            Class<?> thisClass = this.getClass();
            if ($$$cachedGetBundleMethod$$$ == null) {
                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
            }
            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
        } catch (Exception e) {
            bundle = ResourceBundle.getBundle(path);
        }
        return bundle.getString(key);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panneauPrincipal;
    }
}